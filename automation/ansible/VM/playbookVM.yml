- name: docker installation
  strategy: free
  hosts: all
  vars:
    ansible_python_interpreter: /bin/python3
  tasks:    
    ##################
    #	ssh
    #################
    - name: copying file with the pub keys
      copy:
        src: /home/{{ ansible_user }}/pkeys/temp.txt
        dest: /home/{{ ansible_user }}/sshKeys

    - name: setting authorized pub keys
      become: true
      shell: "cat sshKeys >> /home/{{ ansible_user }}/.ssh/authorized_keys"
      args:
        chdir: /home/{{ ansible_user }}


    ##################
    #	Install
    #################
    - name: Update apt
      become: yes
      apt:
        update_cache: true

    - name: Install docker
      become: true
      snap:
        name: docker

    - name: Install pip
      become: yes
      apt:
        name: python3-pip

    - name: Install python docker libs
      become: yes
      apt:
        name: python3-docker

    - name: Install python docker compose libs
      become: yes
      pip:
        name: docker-compose

    ##################
    #	AWS ECR login
    #################
    - name: Read repo file
      ansible.builtin.shell: "cat ~/remote-files/repo"
      register: repofile
      delegate_to: localhost

    - name: Set repo
      set_fact:
        aws_ECR_URL: "{{ repofile.stdout }}"    
      delegate_to: localhost

    - name: Get aws password
      ansible.builtin.shell: "aws ecr get-login-password"
      register: awsPass
      delegate_to: localhost

    - name: Docker login
      become: yes
      community.docker.docker_login:
        registry_url: "{{ aws_ECR_URL }}"
        username: AWS
        password: "{{awsPass.stdout}}"


    #################
    #	BANCO
    ################
    - name: read db vars
      include_vars: /home/{{ ansible_user }}/remote-files/ansible-vars.yaml
      when: "'db' in group_names"

    - name: copying db files
      copy:
        src: /home/{{ ansible_user }}/ecommerce/banco
        dest: /home/{{ ansible_user }}
      when: "'db' in group_names"

    - name: copying db env
      copy:
        src: /home/{{ ansible_user }}/remote-files/dbenv
        dest: /home/{{ ansible_user }}/banco/.env
      when: "'db' in group_names"

    - name: running docker
      become: yes
      community.docker.docker_compose:
        project_src: /home/{{ ansible_user }}/banco
        build: false
        env_file: /home/{{ ansible_user }}/banco/.env #require .env file
        recreate: "always"
        remove_orphans : true
      register: output
      when: "'db' in group_names"

    - debug:
        var: output
      when: "'db' in group_names"

    - name: Waiting for postgres to initialize
      wait_for:
        timeout: 5
      when: "'db' in group_names"
      delegate_to: localhost

    - name: "Create app database"
      postgresql_db:
        name: Produtos	
        login_host: "{{pgreHost}}"
        login_user: "{{pgreUser}}"
        login_password: "{{pgrePass}}"
      when: "'db' in group_names"
      delegate_to: localhost

    - name: "Init database UID"
      postgresql_query:
        db: Produtos	
        query: "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\""
        login_host: "{{pgreHost}}"
        login_user: "{{pgreUser}}"
        login_password: "{{pgrePass}}"
      when: "'db' in group_names"
      delegate_to: localhost

    - name: "Create app table"
      postgresql_table:
        db: Produtos	
        table: "produto"
        columns: ["sku UUID PRIMARY KEY", "product_name VARCHAR (255) NOT NULL", "description VARCHAR(255)", "price NUMERIC(10,2) NOT NULL", "quantity INT NOT NULL", "image_link VARCHAR (255) NOT NULL"]
        login_host: "{{pgreHost}}"
        login_user: "{{pgreUser}}"
        login_password: "{{pgrePass}}"
      when: "'db' in group_names"
      delegate_to: localhost
    
    - name: "test db"
      postgresql_query:
        db: Produtos	
        query: "INSERT INTO produto(sku, product_name, description, price, quantity, image_link) VALUES (uuid_generate_v4(), 'cigarro', 'Faz bem', 9.50, 1, 's3://ecommerce-as4d4ewf4wsaxasf5ergsax4er62d/79f8c29dfb6f-448d-9a99-f02ca6e7dd86.webp')"
        login_host: "{{pgreHost}}"
        login_user: "{{pgreUser}}"
        login_password: "{{pgrePass}}"
      when: "'db' in group_names"
      delegate_to: localhost



    #################
    #	LOG
    ################
    - name: copying IPs to log vm
      copy:
        src: /home/{{ ansible_user }}/remote-files/hosts
        dest: /home/{{ ansible_user }}/ips
      when: "'grafana' in group_names"



    #################
    #	Front
    ################
    - name: copying db files
      copy:
        src: /home/{{ ansible_user }}/ecommerce/front-back
        dest: /home/{{ ansible_user }}
      when: "'front-back' in group_names"

    - name: copying .env to front
      copy:
        src: /home/{{ ansible_user }}/remote-files/dotenv
        dest: /home/{{ ansible_user }}/front-back/frontend/.env
      when: "'front-back' in group_names"

    - name: copying .env to front
      copy:
        src: /home/{{ ansible_user }}/remote-files/dotenv
        dest: /home/{{ ansible_user }}/front-back/backend.env
      when: "'front-back' in group_names"

    - name: running docker
      become: yes
      community.docker.docker_compose:
        project_src: /home/{{ ansible_user }}/front-back
        build: true
        recreate: "always"
        remove_orphans : true
      register: output
      when: "'front-back' in group_names"

    - debug:
        var: output
      when: "'front-back' in group_names"
