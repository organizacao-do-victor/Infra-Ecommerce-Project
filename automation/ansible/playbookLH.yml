############
# Allow ssh
############
- name: get ssh keys
  hosts: all
  tags: ssh
  tasks:
    - name: Clone a pkeys
      git:
        repo: https://github.com/organizacao-do-victor/pkeys.git
        dest: /home/{{ ansible_user }}/pkeys
        force: true
        depth: 1
        clone: yes
        update: yes

    - name: grouping pubkeys into temp.txt
      shell: "cat *.pub >> temp.txt"
      args:
       chdir: /home/{{ ansible_user }}/pkeys

    - name: copying keys into authorized keys
      become: yes
      shell: "cat /home/{{ ansible_user }}/pkeys/temp.txt >> /home/{{ ansible_user }}/.ssh/authorized_keys"


#############
# Install dep
#############
- name: Install dependencies 
  hosts: all
  tags: dep
  tasks:
    - name: Update apt
      become: yes
      apt:
        update_cache: true

    - name: "installing docker..."
      become: yes
      snap:    
        name: docker

    - name: "installing aws cli..."
      become: yes
      apt:    
        name: awscli
        state: latest

    - name: "installing psycopg2..."
      become: yes
      apt:    
        name: python3-psycopg2
        state: latest

    - name: "installing pip..."
      become: yes
      apt:    
        name: python3-pip
        state: latest

    - name: "installing ansible..."
      become: yes
      pip:    
        name: ansible

    - name: Install python docker libs
      become: yes
      apt:
        name: python3-docker


############
# Get files
############
- name: Move files
  hosts: all
  tags: files
  tasks:
    - name: copying remote-files
      copy:
        src: "{{ playbook_dir }}/remote-files"
        dest: /home/{{ ansible_user }}

    - name: copying aws credentials
      copy:
        src: "~/.aws/"
        dest: /home/{{ ansible_user }}/.aws/

    - name: creating aws config
      copy:
        src: "{{ playbook_dir }}/remote-files/awsconfig"
        dest: /home/{{ ansible_user }}/.aws/config
        force: false

    - name: copying private key with read only permissions
      copy:
        src: "{{ playbook_dir }}/../terraform/ecommerce-key"
        dest: /home/{{ ansible_user }}/remote-files/
        mode: '400'

    - name: read vars
      include_vars: "{{ playbook_dir }}/ansible-vars.yaml"

    - name: Clone a ecommerce
      git:
        repo: https://github.com/organizacao-do-victor/Infra-Ecommerce-Project.git
        dest: /home/{{ ansible_user }}/ecommerce
        version: "{{branch}}"
        force: true
        depth: 1
        clone: yes
        update: yes


############
# ECR Images
############
- name: Update ECR images
  hosts: all
  tags: ecr
  tasks:
    - name: Read repo file
      ansible.builtin.shell: "cat ~/remote-files/repo"
      register: repofile

    - name: Set repo
      set_fact:
        aws_ECR_URL: "{{ repofile.stdout }}"    

    - name: Get aws password
      ansible.builtin.shell: "aws ecr get-login-password"
      register: awsPass

    - name: Docker login
      become: yes
      community.docker.docker_login:
        registry_url: "{{ aws_ECR_URL }}"
        username: AWS
        password: "{{awsPass.stdout}}"

    - name: Pulling postgres image
      become: yes
      community.docker.docker_image:
        name: postgres
        source: pull
        pull:

    - name: Pulling mongo image
      become: yes
      community.docker.docker_image:
        name: mongo
        source: pull
        pull:

    - name: Building front image
      become: yes
      community.docker.docker_image:
        name: frontend
        build:
          path: /home/{{ ansible_user }}/ecommerce/front-back/frontend
        source: build

    - name: Building back image
      become: yes
      community.docker.docker_image:
        name: backend
        build:
          path: /home/{{ ansible_user }}/ecommerce/front-back/backend
        source: build
    

    - name: Pushing postgres
      become: yes
      community.docker.docker_image:
        name: postgres
        repository: "{{aws_ECR_URL}}/postgres:latest"
        push: true
        source: local

    - name: Pushing mongo
      become: yes
      community.docker.docker_image:
        name: mongo
        repository: "{{aws_ECR_URL}}/mongo:latest"
        push: true
        source: local

    - name: Pushing frontend
      become: yes
      community.docker.docker_image:
        name: frontend
        repository: "{{aws_ECR_URL}}/frontend:latest"
        push: true
        source: local

    - name: Pushing backend
      become: yes
      community.docker.docker_image:
        name: backend
        repository: "{{aws_ECR_URL}}/backend:latest"
        push: true
        source: local
    

################
# Node Exporter
###############
- name: Install node exporter
  hosts: all
  tags: pnode
  tasks:
    - name: Install node exporter on Ansible EC2
      shell: "ansible-playbook node_exporter.yml --private-key   ../../terraform/ecommerce-key -i ../hosts"
      register: nodeexp
      args:
       chdir: "{{ playbook_dir }}/ansible-node-exporter/"
      delegate_to: localhost

    - debug:
        var: nodeexp.stdout_lines

- name: Install node exporter on other EC2s
  hosts: all
  tags: pnode
  tasks:
    - name: Install node exporter
      shell: "ansible-playbook node_exporter.yml --private-key   ~/remote-files/ecommerce-key -i ~/remote-files/hosts"
      register: nodeexp
      args:
       chdir: /home/{{ ansible_user }}/ecommerce/automation/ansible/ansible-node-exporter

    - debug:
        var: nodeexp.stdout_lines

############
# Run
############
- name: Run ansible
  hosts: all
  tags: run
  tasks:
    - name: Run ansible
      shell: "ansible-playbook playbookVM.yml --private-key   ~/remote-files/ecommerce-key -i ~/remote-files/hosts"
      register: ansible
      args:
       chdir: /home/{{ ansible_user }}/ecommerce/automation/ansible/VM

    - debug:
        var: ansible.stdout_lines


############
# Test db 
############
- name: Run ansible test values
  hosts: all
  tags: test
  tasks:
    - name: Run ansible
      shell: "ansible-playbook dbProdInit.yml"
      register: ansible
      args:
       chdir: /home/{{ ansible_user }}/ecommerce/test

    - debug:
        var: ansible.stdout_lines
